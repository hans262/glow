{"version":3,"sources":["reduxd/LoadData.tsx","reduxd/Todo.tsx","reduxd/index.tsx"],"names":["connect","state","music","props","data","pending","dispatch","loading","size","danger","type","onClick","ACTION","FETCH_DATA","payload","bordered","dataSource","renderItem","item","Item","todoId","todo","filter","Search","placeholder","enterButton","onSearch","v","trim","id","text","completed","ADD_TODO","td","filterTodo","TOGGLE_TODO","style","color","cursor","Group","defaultValue","onChange","e","target","value","SWITCH_TODO_FILTER","buttonStyle","Button","Reduxd"],"mappings":"kJA8BA,IAIeA,eAJE,SAACC,GAAD,MAAmB,CAClCC,MAAOD,EAAMC,SAGAF,EA3Bf,SAAkBG,GAAuB,IAAD,EACSA,EAAvCD,MAASE,EADqB,EACrBA,KAAMC,EADe,EACfA,QAAWC,EAAaH,EAAbG,SAIlC,OACE,gCACE,cAAC,IAAD,CACEC,QAASF,EACTG,KAAK,QACLC,QAAM,EACNC,KAAK,UACLC,QAVc,WAClBL,EAAS,CAAEI,KAAME,IAAOC,WAAYC,QAAS,WAI3C,uBAOA,cAAC,IAAD,CACEC,UAAQ,EACRC,WAAYZ,EACZa,WAAY,SAAAC,GAAI,OAAI,cAAC,IAAKC,KAAN,UAAYD,a,kBCjBpCE,EAAS,EA2Db,IAIepB,eAJE,SAACC,GAAD,MAAmB,CAClCoB,KAAMpB,EAAMoB,QAGCrB,EA5Df,SAAcG,GAAmB,IAAD,EACeA,EAArCkB,KAAQjB,EADc,EACdA,KAAMkB,EADQ,EACRA,OAAUhB,EAAaH,EAAbG,SAwBhC,OACE,gCACE,cAAC,IAAMiB,OAAP,CACEC,YAAY,aACZC,YAAY,WACZjB,KAAK,QACLkB,SA7BW,SAACC,GAChB,GAAKA,EAAEC,OAAP,CACA,IAAMP,EAAO,CAAEQ,GAAIT,IAAUU,KAAMH,EAAGI,WAAW,GACjDzB,EAAS,CAAEI,KAAME,IAAOoB,SAAUlB,QAASO,QA4BzC,cAAC,IAAD,CACEN,UAAQ,EACRC,WApBa,SAACM,GAClB,OAAQA,GACN,IAAK,iBACH,OAAOlB,EAAKkB,QAAO,SAAAW,GAAE,OAAIA,EAAGF,aAC9B,IAAK,cACH,OAAO3B,EAAKkB,QAAO,SAAAW,GAAE,OAAKA,EAAGF,aAC/B,QACE,OAAO3B,GAaK8B,CAAWZ,GACvBL,WAAY,SAACU,GAAD,OACV,cAAC,IAAKR,KAAN,CACER,QAAS,kBA/BEkB,EA+BgBF,EAAEE,GA9BrCvB,EAAS,CAAEI,KAAME,IAAOuB,YAAarB,QAAS,SAC9CR,EAAS,CAAEI,KAAME,IAAOuB,YAAarB,QAASe,IAF5B,IAACA,GAgCXO,MAAO,CAAEC,MAAOV,EAAEI,UAAY,MAAQ,QAASO,OAAQ,WAFzD,SAGEX,EAAEG,UAGR,eAAC,IAAMS,MAAP,CACEC,aAAclB,EACdmB,SAlCgB,SAACC,GACrB,IAAMpB,EAASoB,EAAEC,OAAOC,MACxBtC,EAAS,CAAEI,KAAME,IAAOiC,mBAAoB/B,QAASQ,KAiCjDwB,YAAY,QAHd,UAKE,cAAC,IAAMC,OAAP,CAAcH,MAAM,WAApB,sBACA,cAAC,IAAMG,OAAP,CAAcH,MAAM,iBAApB,4BACA,cAAC,IAAMG,OAAP,CAAcH,MAAM,cAApB,kCChDOI,UATf,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD","file":"static/js/21.6a557a9f.chunk.js","sourcesContent":["import { Button, List } from 'antd'\r\nimport { connect, DispatchProp } from 'react-redux'\r\nimport { State } from '../store'\r\nimport { ACTION, Action } from '../store/actions'\r\n\r\ninterface LoadDataProps extends ReturnType<typeof mapstate>, DispatchProp<Action> { }\r\n\r\nfunction LoadData(props: LoadDataProps) {\r\n  const { music: { data, pending }, dispatch } = props\r\n  const onLoadClick = () => {\r\n    dispatch({ type: ACTION.FETCH_DATA, payload: 'music' })\r\n  }\r\n  return (\r\n    <div>\r\n      <Button\r\n        loading={pending}\r\n        size=\"large\"\r\n        danger\r\n        type=\"primary\"\r\n        onClick={onLoadClick}\r\n      >LOAD DATA</Button>\r\n      <List\r\n        bordered\r\n        dataSource={data}\r\n        renderItem={item => <List.Item>{item}</List.Item>}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapstate = (state: State) => ({\r\n  music: state.music\r\n})\r\n\r\nexport default connect(mapstate)(LoadData)","import { Input, List, Radio } from 'antd'\r\nimport { connect, DispatchProp } from 'react-redux'\r\nimport { State } from '../store';\r\nimport { Action, ACTION } from '../store/actions';\r\nimport { RadioChangeEvent } from 'antd/lib/radio';\r\nimport { TodoFilter } from '../store/todo';\r\n\r\nlet todoId = 0\r\ninterface TodoProps extends ReturnType<typeof mapstate>, DispatchProp<Action> { }\r\n\r\nfunction Todo(props: TodoProps) {\r\n  const { todo: { data, filter }, dispatch } = props\r\n  const onSearch = (v: string) => {\r\n    if (!v.trim()) return\r\n    const todo = { id: todoId++, text: v, completed: false }\r\n    dispatch({ type: ACTION.ADD_TODO, payload: todo })\r\n  }\r\n  const onTodoClick = (id: number) => {\r\n    dispatch({ type: ACTION.TOGGLE_TODO, payload: 2 })\r\n    dispatch({ type: ACTION.TOGGLE_TODO, payload: id })\r\n  }\r\n  const onRadioChange = (e: RadioChangeEvent) => {\r\n    const filter = e.target.value\r\n    dispatch({ type: ACTION.SWITCH_TODO_FILTER, payload: filter })\r\n  }\r\n  const filterTodo = (filter: TodoFilter) => {\r\n    switch (filter) {\r\n      case 'SHOW_COMPLETED':\r\n        return data.filter(td => td.completed)\r\n      case 'SHOW_ACTIVE':\r\n        return data.filter(td => !td.completed)\r\n      default:\r\n        return data\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <Input.Search\r\n        placeholder=\"input todo\"\r\n        enterButton=\"Add Todo\"\r\n        size=\"large\"\r\n        onSearch={onSearch}\r\n      />\r\n      <List\r\n        bordered\r\n        dataSource={filterTodo(filter)}\r\n        renderItem={(v) =>\r\n          <List.Item\r\n            onClick={() => onTodoClick(v.id)}\r\n            style={{ color: v.completed ? 'red' : 'green', cursor: 'pointer' }}\r\n          >{v.text}</List.Item>\r\n        }\r\n      />\r\n      <Radio.Group\r\n        defaultValue={filter}\r\n        onChange={onRadioChange}\r\n        buttonStyle=\"solid\"\r\n      >\r\n        <Radio.Button value=\"SHOW_ALL\">SHOW_ALL</Radio.Button>\r\n        <Radio.Button value=\"SHOW_COMPLETED\">SHOW_COMPLETED</Radio.Button>\r\n        <Radio.Button value=\"SHOW_ACTIVE\">SHOW_ACTIVE</Radio.Button>\r\n      </Radio.Group>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapstate = (state: State) => ({\r\n  todo: state.todo\r\n})\r\n\r\nexport default connect(mapstate)(Todo)","import LoadData from \"./LoadData\"\r\nimport Todo from \"./Todo\"\r\n\r\nfunction Reduxd() {\r\n  return (\r\n    <div>\r\n      <Todo />\r\n      <LoadData />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Reduxd"],"sourceRoot":""}