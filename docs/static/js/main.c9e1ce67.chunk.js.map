{"version":3,"sources":["Router.tsx","store/todo.ts","store/music.ts","store/paperStore.ts","store/index.ts","App.tsx","reportWebVitals.ts","index.tsx","store/actions.ts"],"names":["DraftPlan","lazy","Tensorflow","Test","Reduxd","Paperd","Rxjsd","Game","DuckShooter","Router","fallback","exact","path","component","from","to","initTodo","data","filter","initMusic","pending","loadData","params","setTimeout","a","fetch","process","then","res","json","response","store","dispatch","type","ACTION","FETCH_DATA_SUCCESS","payload","console","log","FETCH_DATA_FAIL","initPaperStore","rootState","combineReducers","todo","state","action","ADD_TODO","TOGGLE_TODO","map","id","completed","SWITCH_TODO_FILTER","music","FETCH_DATA","paperStore","ADD_PAPER_PATH","REMOVE_PAPER_PATH","p","TOGGLE_PAPER_PATH","visible","createStore","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9e1ce67.chunk.js","sourcesContent":["import { lazy, Suspense } from 'react';\r\nimport {\r\n  BrowserRouter,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\"\r\n\r\nconst DraftPlan = lazy(() =>import('./draftplan/DraftPlan'))\r\nconst Tensorflow = lazy(() => import('./tensorflow'))\r\nconst Test = lazy(() => import('./test/Test'))\r\nconst Reduxd = lazy(() => import('./reduxd'))\r\nconst Paperd = lazy(() => import('./paperd'))\r\nconst Rxjsd = lazy(() => import('./rxjsd'))\r\nconst Game = lazy(() => import('./game'))\r\nconst DuckShooter = lazy(() => import('./duckshooter'))\r\n\r\nexport default function Router() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Suspense fallback={'路由加载中'}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={DraftPlan} />\r\n          <Route path=\"/tensorflow\" component={Tensorflow} />\r\n          <Route path=\"/test\" component={Test} />\r\n          <Route path=\"/reduxd\" component={Reduxd} />\r\n          <Route path=\"/paperd\" component={Paperd} />\r\n          <Route path=\"/rxjsd\" component={Rxjsd} />\r\n          <Route path=\"/game\" component={Game} />\r\n          <Route path=\"/duckshooter\" component={DuckShooter} />\r\n\r\n          <Redirect from=\"*\" to=\"/tensorflow\"></Redirect>\r\n        </Switch>\r\n      </Suspense>\r\n    </BrowserRouter>\r\n  )\r\n}","import { Action, ACTION } from './actions'\r\n\r\nexport interface TodoData {\r\n  id: number\r\n  text: string\r\n  completed: boolean\r\n}\r\nexport type TodoFilter = 'SHOW_ALL' | 'SHOW_COMPLETED' | 'SHOW_ACTIVE'\r\nexport interface Todo {\r\n  data: TodoData[]\r\n  filter: TodoFilter\r\n}\r\nconst initTodo: Todo = {\r\n  data: [],\r\n  filter: 'SHOW_ALL'\r\n}\r\n\r\nexport function todo(state = initTodo, action: Action): Todo {\r\n  switch (action.type) {\r\n    case ACTION.ADD_TODO:\r\n      return { ...state, data: [...state.data, action.payload] }\r\n    case ACTION.TOGGLE_TODO:\r\n      return {\r\n        ...state, data: state.data.map(todo =>\r\n          todo.id === action.payload ? { ...todo, completed: !todo.completed } : todo\r\n        )\r\n      }\r\n    case ACTION.SWITCH_TODO_FILTER:\r\n      return { ...state, filter: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}","import store from '.'\r\nimport { Action, ACTION } from './actions'\r\n\r\nexport type Music = {\r\n  pending: boolean\r\n  data: string[]\r\n}\r\n\r\nconst initMusic: Music = { pending: false, data: [] }\r\nexport function music(state = initMusic, action: Action): Music {\r\n  switch (action.type) {\r\n    case ACTION.FETCH_DATA_SUCCESS:\r\n      return { ...state, pending: false, data: action.payload }\r\n    case ACTION.FETCH_DATA_FAIL:\r\n      return { ...state, pending: false }\r\n    case ACTION.FETCH_DATA:\r\n      loadData(action.payload)\r\n      return { ...state, pending: true }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function loadData(params: string) {\r\n  /* Simulate an asynchronous wait */\r\n  setTimeout(async () => {\r\n    try {\r\n      const response = await fetch(\r\n        process.env.REACT_APP_URL + '/data.json'\r\n      ).then(res => res.json())\r\n      store.dispatch({\r\n        type: ACTION.FETCH_DATA_SUCCESS,\r\n        payload: response[params]\r\n      })\r\n    } catch (err) {\r\n      console.log(err)\r\n      store.dispatch({ type: ACTION.FETCH_DATA_FAIL })\r\n    }\r\n  }, 1000)\r\n}","import { Action, ACTION } from './actions';\r\n\r\nexport type PaperStore = {\r\n  path: PaperPath[]\r\n}\r\n\r\nexport interface PaperPath {\r\n  id: number,\r\n  visible: boolean\r\n}\r\n\r\nconst initPaperStore: PaperStore = {\r\n  path: []\r\n}\r\n\r\nexport function paperStore(state = initPaperStore, action: Action): PaperStore {\r\n  switch (action.type) {\r\n    case ACTION.ADD_PAPER_PATH:\r\n      return { ...state, path: [...state.path, action.payload] }\r\n    case ACTION.REMOVE_PAPER_PATH:\r\n      return { ...state, path: state.path.filter(p => p.id !== action.payload) }\r\n    case ACTION.TOGGLE_PAPER_PATH:\r\n      return {\r\n        ...state, path: state.path.map(p =>\r\n          p.id === action.payload ? { ...p, visible: !p.visible } : p\r\n        )\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { combineReducers } from 'redux'\r\nimport { createStore } from 'redux'\r\nimport { todo, Todo } from './todo'\r\nimport { Music, music } from './music'\r\nimport { Action } from './actions'\r\nimport { PaperStore, paperStore } from './paperStore'\r\n\r\nconst rootState = combineReducers<State, Action>({\r\n  todo,\r\n  music,\r\n  paperStore\r\n})\r\n\r\nexport type State = {\r\n  todo: Todo,\r\n  music: Music,\r\n  paperStore: PaperStore\r\n}\r\n\r\nconst store = createStore(rootState)\r\nexport default store","import Router from './Router'\r\nimport { Provider } from 'react-redux'\r\nimport store from './store'\r\n\r\nexport default function App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router />\r\n    </Provider>\r\n  )\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { PaperPath } from \"./paperStore\";\r\nimport { TodoData, TodoFilter } from \"./todo\";\r\n\r\nexport enum ACTION {\r\n  /**\r\n   * load music\r\n   */\r\n  FETCH_DATA = 'FETCH_DATA',\r\n  FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS',\r\n  FETCH_DATA_FAIL = 'FETCH_DATA_FAIL',\r\n\r\n  /**\r\n   * todo\r\n   */\r\n  ADD_TODO = 'ADD_TODO',\r\n  TOGGLE_TODO = 'TOGGLE_TODO',\r\n  SWITCH_TODO_FILTER = 'SWITCH_TODO_FILTER',\r\n\r\n  /**\r\n   * paper\r\n   */\r\n\r\n  ADD_PAPER_PATH = 'ADD_PAPER_PATH',\r\n  REMOVE_PAPER_PATH = 'REMOVE_PATH',\r\n  TOGGLE_PAPER_PATH = 'TOGGLE_PATH'\r\n}\r\n\r\n\r\nexport type Action =\r\n  { type: ACTION.FETCH_DATA, payload: string } |\r\n  { type: ACTION.FETCH_DATA_SUCCESS, payload: string[] } |\r\n  { type: ACTION.FETCH_DATA_FAIL } |\r\n\r\n  { type: ACTION.ADD_TODO, payload: TodoData } |\r\n  { type: ACTION.TOGGLE_TODO, payload: number } |\r\n  { type: ACTION.SWITCH_TODO_FILTER, payload: TodoFilter } |\r\n\r\n  { type: ACTION.ADD_PAPER_PATH, payload: PaperPath } |\r\n  { type: ACTION.REMOVE_PAPER_PATH, payload: number } |\r\n  { type: ACTION.TOGGLE_PAPER_PATH, payload: number }\r\n"],"sourceRoot":""}