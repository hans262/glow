{"version":3,"sources":["rxjsd/Queue.tsx"],"names":["Queue","source","useRef","content","subject","Subject","useState","nums","setNums","useEffect","subscription","current","pipe","concatMap","v","interval","take","map","x","subscribe","writeBall","console","log","unsubscribe","style","margin","overflow","ref","onClick","random","Math","next","height","position","n","key","num","RANGE","currentOffset","color","join","ball","document","createElement","top","left","width","background","borderRadius","fontSize","textAlign","lineHeight","boxShadow","innerHTML","toString","appendChild","id","setInterval","clearInterval","removeChild"],"mappings":"6NAIe,SAASA,IACtB,IAAMC,EAASC,iBAA0B,MACnCC,EAAUD,iBAAuB,MACjCE,EAAUF,iBAAwB,IAAIG,KAHd,EAINC,mBAAmB,IAJb,mBAIvBC,EAJuB,KAIjBC,EAJiB,KA0B9B,OAfAC,qBAAU,WACR,IAGMC,EAHaN,EAAQO,QAAQC,KACjCC,aAAU,SAAAC,GAAC,OAAIC,YAAS,KAAMH,KAAKI,YAAK,GAAIC,aAAI,SAAAC,GAAC,OAAIJ,UAEvBK,WAAU,SAAAL,GACxCX,EAAQQ,SAAWS,EAAUN,EAAGX,EAAQQ,YAK1C,OAHAP,EAAQO,QAAQQ,WAAU,SAAAL,GACxBO,QAAQC,IAAIR,MAEP,WACLJ,EAAaa,iBAEd,IAGD,sBAAKC,MAAO,CAAEC,OAAQ,GAAIC,SAAU,SAApC,UACE,+DACA,wBAAQC,IAAK1B,EAAQ2B,QAxBX,WACZ,IAAMC,KAA4B,GAAhBC,KAAKD,UACvBzB,EAAQO,QAAQoB,KAAKF,GACrBrB,EAAQ,CAACqB,GAAF,mBAAatB,MAqBlB,oBACA,qBAAKiB,MAAO,CAAEQ,OAAQ,IAAKC,SAAU,YAAcN,IAAKxB,IACxD,8BAAMI,EAAKU,KAAI,SAACiB,EAAGC,GAAJ,OAAY,sBAAgBX,MAAO,CAAEC,OAAQ,SAAjC,SAA6CS,GAAlCC,WAM5C,IAAMf,EAAY,SAACgB,EAAajC,GAC9B,IAAMkC,EAAQ,CAAC,EAAG,IACdC,EAAgBD,EAAM,GAIpBE,EAAQ,QAAU,CACN,IAAhBT,KAAKD,SACW,IAAhBC,KAAKD,SACW,IAAhBC,KAAKD,UACLW,KAAK,KAAO,OACRC,EAAOC,SAASC,cAAc,OACpCF,EAAKjB,MAAMS,SAAW,WACtBQ,EAAKjB,MAAMoB,IAAM,OACjBH,EAAKjB,MAAMqB,KAAOR,EAAM,GAAK,IAC7BI,EAAKjB,MAAMsB,MAAQ,OACnBL,EAAKjB,MAAMQ,OAAS,OACpBS,EAAKjB,MAAMuB,WAAaR,EACxBE,EAAKjB,MAAMwB,aAAe,MAC1BP,EAAKjB,MAAMyB,SAAW,OACtBR,EAAKjB,MAAM0B,UAAY,SACvBT,EAAKjB,MAAM2B,WAAa,OACxBV,EAAKjB,MAAMe,MAAQ,OACnBE,EAAKjB,MAAM4B,UAAY,mBACvBX,EAAKY,UAAYjB,EAAIkB,WACrBnD,EAAQoD,YAAYd,GAEpB,IAAMe,EAAKC,aAAY,WACrBnB,GAzBgB,GA0BhBG,EAAKjB,MAAMqB,KAAOP,EAAgB,IAC9BA,EAAgBD,EAAM,KACxBqB,cAAcF,GACdrD,EAAQwD,YAAYlB,MAErB","file":"static/js/23.81aa5b50.chunk.js","sourcesContent":["import { useRef, useEffect, useState } from 'react'\r\nimport { interval, Subject } from 'rxjs';\r\nimport { map, concatMap, take } from 'rxjs/operators';\r\n\r\nexport default function Queue() {\r\n  const source = useRef<HTMLButtonElement>(null)\r\n  const content = useRef<HTMLDivElement>(null)\r\n  const subject = useRef<Subject<number>>(new Subject())\r\n  const [nums, setNums] = useState<number[]>([])\r\n  const click = () => {\r\n    const random = ~~(Math.random() * 10)\r\n    subject.current.next(random)\r\n    setNums([random, ...nums])\r\n  }\r\n\r\n  useEffect(() => {\r\n    const observable = subject.current.pipe(\r\n      concatMap(v => interval(1000).pipe(take(1), map(x => v)))\r\n    )\r\n    const subscription = observable.subscribe(v => {\r\n      content.current && writeBall(v, content.current)\r\n    })\r\n    subject.current.subscribe(v => {\r\n      console.log(v)\r\n    })\r\n    return () => {\r\n      subscription.unsubscribe()\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div style={{ margin: 10, overflow: 'hiden' }}>\r\n      <h1>RxJs 队列实现</h1>\r\n      <button ref={source} onClick={click}>source</button>\r\n      <div style={{ height: 100, position: 'relative' }} ref={content}></div>\r\n      <div>{nums.map((n, key) => <span key={key} style={{ margin: '0 5px' }}>{n}</span>)}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\n//写入流\r\nconst writeBall = (num: number, content: HTMLDivElement) => {\r\n  const RANGE = [0, 80] as const\r\n  let currentOffset = RANGE[0]\r\n  const INCREMENT = .2\r\n  const FPS = 40\r\n\r\n  const color = 'rgba(' + [\r\n    Math.random() * 255,\r\n    Math.random() * 255,\r\n    Math.random() * 255\r\n  ].join(',') + ', 1)'\r\n  const ball = document.createElement('div')\r\n  ball.style.position = 'absolute'\r\n  ball.style.top = '25px'\r\n  ball.style.left = RANGE[0] + '%'\r\n  ball.style.width = '50px'\r\n  ball.style.height = '50px'\r\n  ball.style.background = color\r\n  ball.style.borderRadius = '50%'\r\n  ball.style.fontSize = '16px'\r\n  ball.style.textAlign = 'center'\r\n  ball.style.lineHeight = '50px'\r\n  ball.style.color = '#fff'\r\n  ball.style.boxShadow = '1px 1px 1px #bbb'\r\n  ball.innerHTML = num.toString()\r\n  content.appendChild(ball)\r\n\r\n  const id = setInterval(() => {\r\n    currentOffset += INCREMENT\r\n    ball.style.left = currentOffset + '%'\r\n    if (currentOffset > RANGE[1]) {\r\n      clearInterval(id)\r\n      content.removeChild(ball)\r\n    }\r\n  }, 1000 / FPS)\r\n}\r\n"],"sourceRoot":""}